void LCD_clear();
void LCD_power_on();
void LCD_power_off(int clear);
void LCD_write_line(uint8_t * buf);
void bitblt24(uint32_t x, uint32_t dx, uint32_t y, uint32_t val, int blt_op, int fill);
uint8_t * lcd_line_addr(int y);
void lcd_clear_buf();
void lcd_refresh();
void lcd_refresh_dma();
void lcd_refresh_wait();
void lcd_forced_refresh();
void lcd_refresh_lines(int ln, int cnt);
void lcd_fill_rect(uint32_t x, uint32_t y, uint32_t dx, uint32_t dy, int val);
void lcd_fill_ptrn(int x, int y, int dx, int dy, int ptrn1, int ptrn2);
void lcd_draw_img(const char* img, uint32_t xo, uint32_t yo, uint32_t x, uint32_t y);
void lcd_draw_img_direct(const char* img, uint32_t xo, uint32_t yo, uint32_t x, uint32_t y);
void lcd_draw_img_part(const char* img, uint32_t xo, uint32_t yo, uint32_t x, uint32_t y, uint32_t dx);
void lcd_fillLine(int ln, uint8_t val);
void lcd_fillLines(int ln, uint8_t val, int cnt);
void lcd_set_buf_cleared(int val);
int lcd_get_buf_cleared();
uint8_t reverse_byte(uint8_t x);
void lcd_writeNl(disp_stat_t * ds);
void lcd_prevLn(disp_stat_t * ds);
void lcd_writeClr(disp_stat_t * ds);
void lcd_setLine(disp_stat_t * ds, int ln_nr);
void lcd_setXY(disp_stat_t * ds, int x, int y);
int lcd_lineHeight(disp_stat_t * ds);
int lcd_baseHeight(disp_stat_t * ds);
int lcd_fontWidth(disp_stat_t * ds);
void lcd_writeText(disp_stat_t * ds, const char* text);
void lcd_textToBox(disp_stat_t * ds, int x, int width, char *text, int from_right, int align_right);
int lcd_textWidth(disp_stat_t * ds, const char* text);
int lcd_charWidth(disp_stat_t * ds, int c);
int lcd_textToWidth(disp_stat_t * ds, const char* text, int expected_width, int * plen);
int lcd_textToWidthR(disp_stat_t * ds, const char* text, int expected_width, int * plen);
void lcd_writeTextWidth(disp_stat_t * ds, const char* text);
int lcd_textForWidth(disp_stat_t * ds, const char* text, int expected_width, int * plen);
int lcd_nextFontNr(int nr);
int lcd_prevFontNr(int nr);
void lcd_switchFont(disp_stat_t * ds, int nr);
int lcd_toggleFontT(int nr);
int lcd_for_calc(int what);
void lcd_draw_menu_bg();
void lcd_draw_menu_key(int n, const char *s, int highlight);
void lcd_draw_menu_keys(const char *keys[]);
void lcd_print(disp_stat_t * ds, const char* fmt, ...);
const char* get_wday_shortcut(int day); // 0 = Monday
const char* get_month_shortcut(int month); // 1 = Jan
int julian_day(dt_t *d);
void julian_to_date(int julian_day, dt_t *d);
uint8_t get_hw_id();
void rtc_read(tm_t * tm, dt_t *dt);
void rtc_write(tm_t * tm, dt_t *dt);
void rtc_update_time_sec(int delta_sec);
uint8_t rtc_read_century();
void rtc_write_century(uint8_t cent);
uint8_t rtc_read_min();
uint8_t rtc_read_sec();
void rtc_wakeup_delay();
uint32_t read_power_voltage();
int get_lowbat_state();
int get_vbat();
void start_buzzer_freq(uint32_t freq);
void stop_buzzer();
void set_buzzer(int pin1val, int pin2val);
void beep_volume_up();
void beep_volume_down();
int get_beep_volume();
uint32_t mark_region(uint32_t id);
void no_region();
void set_reset_magic(uint32_t value);
int is_reset_state_file();
char * get_reset_state_file();
void set_reset_state_file(const char * str);
int switch_usb_powered_freq();
int usb_powered();
void usb_acm_on();
int usb_is_on();
void usb_turn_off();
void acm_puts(const char *str);
char * aux_buf_ptr();
void * write_buf_ptr();
int write_buf_size();
void program_main();
int read_key(int *k1, int *k2);
int sys_last_scan(int *k1, int *k2);
void suspended_bg_key_read();
void resume_bg_key_read();
uint32_t get_tim1_timer();
void start_timer2(uint32_t div32);
void start_timer3(uint16_t div16);
void stop_timer2();
void stop_timer3();
uint32_t get_rtc_ticks();
rtc_ticks_stat_t* rtc_update_ticks();
void rtc_set_alarm(tm_t * tm, dt_t *dt);
void rtc_cancel_alarm();
int qspi_user_write(uint8_t *data, int size, int offset, int erase);
uint8_t * qspi_user_addr();
int qspi_user_size();
void print_byte(uint8_t b);
void print_buffer(uint8_t * buf, int cnt);
int print_is_ready();
uint printer_get_delay();
void printer_set_delay(uint val);
void printer_advance_buf(int what);
int printer_busy_for(int what);
void rtc_check_unset();
void run_set_time();
void run_set_date();
void disp_disk_info(const char * hdr);
int power_check_screen();
int handle_menu(const smenu_t * menu_id, int action, int cur_line);
const char * rb_str(int val);
const char * sel_str(int val);
char * opt_str(char * s, char const *txt, int val);
char * date_str(char * s, const char * txt);
char * time_str(char * s, const char * txt);
void item_sel_init(item_sel_state_t *st);
void item_sel_reinit(item_sel_state_t *st);
int item_sel_engine(item_sel_state_t *st, int upd);
void item_sel_header(item_sel_state_t *st, int update);
void msg_box(disp_stat_t * ds, const char * txt, int inv);
int run_menu_item_sys(uint8_t line_id);
int create_screenshot(int report_error);
int key_empty();
int key_push(int k1);
int key_tail();
int key_pop();
int key_pop_last();
void key_pop_all();
int key_to_nr(int key);
void wait_for_key_press();
int runner_get_key(int *repeat);
int runner_get_key_delay(int *repeat, uint timeout, uint rep0, uint rep1, uint rep1tout);
void wait_for_key_release(int tout);
int runner_key_tout_value(const int first);
void runner_key_tout_init(const int slow);
int toggle_slow_autorepeat();
int is_slow_autorepeat();
void reset_auto_off();
int is_auto_off();
int is_menu_auto_off();
int sys_auto_off_cnt();
void print_dmy_date(char * s, int const sz, dt_t *dt, const char * append, int shortmon, char sep_arg);
void print_clk24_time(char * t, int const sz, tm_t *tm, int disp_sec, int disp_dow);
int check_create_dir(const char * dir);
void set_fat_label(const char * label);
int file_exists(const char * fn);
int file_size(const char * fn);
int sys_disk_ok();
int sys_disk_write_enable(int val);
void sys_disk_check_valid();
int sys_is_disk_write_enable();
void sys_clear_write_buf_used();
int sys_write_buf_used();
void sys_timer_disable(int timer_ix);
void sys_timer_start(int timer_ix, uint32_t ms_value);
int sys_timer_active(int timer_ix);
int sys_timer_timeout(int timer_ix);
void sys_delay(uint32_t ms_delay); 
uint32_t sys_tick_count();
uint32_t sys_current_ms();
void sys_critical_start();
void sys_critical_end();
void sys_sleep();
int sys_free_mem();
int sys_largest_free_mem();
void sys_reset();
int sys_last_key();
void make_date_filename(char * str, const char * dir, const char * ext);
void run_help();
void run_help_file(const char * help_file);
void run_help_file_style(const char * help_file, user_style_fn_t *user_style_fn);
void draw_power_off_image(int allow_errors);
void reset_off_image_cycle();
int update_bmp_file_header(FIL* fp, int width, int height, uint32_t bg_color);
